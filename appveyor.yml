# appveyor.yml
# Configuration for continuous integration (CI).
# http://www.appveyor.com/about
# http://www.appveyor.com/docs/appveyor-yml

# Remote Desktop access to the build worker seems
# to require a paid AppVeyor account, rather than
# a free open-source account.
# http://www.appveyor.com/docs/how-to/rdp-to-build-worker

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    CODECOV_TOKEN:
      secure: Rg0Q0ecqAFle4YG3gjSDhBpV4JUTwwelG+ZGLClMkWBRZQINh5a20pvj3FkaIoGm
    CODACY_PROJECT_TOKEN:
      secure: kVLJfBgsiibjMtizt055TdGzT/sSnxgZHwfLp2Znyb5ie2SU4WGAPfcxI19nA8o1

  matrix:
    - PYTHON: "C:\\Python37"
      PYTHON_VERSION: "3.7.5"
      PYTHON_ARCH: "32"

install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip
  - "python -m pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements.txt"

  - "%CMD_IN_ENV% pip install pypiwin32"

  - "%CMD_IN_ENV% pip install codecov"

  - "%CMD_IN_ENV% pip install codacy-coverage"

  - "git submodule update --init --recursive"

build: false  # Not a C# project, build stuff at the test step instead.

test_script:
  - "%CMD_IN_ENV% pip install pylint==2.4.4"
  - "pylint --rcfile=.pylintrc mydata"

  - "SET MYDATA_DEBUG_LOG_PATH=."
  - "pytest --cov=mydata"

after_test:
  # If tests are successful, upload coverage data:
  - "codecov -X gcov --branch %APPVEYOR_REPO_BRANCH% --build %APPVEYOR_BUILD_VERSION% & exit 0"
  - "coverage xml"
  - "python-codacy-coverage -c %APPVEYOR_REPO_COMMIT% -d %APPVEYOR_BUILD_FOLDER% -r coverage.xml & exit 0"

  # If tests are successful, create a binary installer for the project.
  - "choco install -y InnoSetup"
  - "python setup.py bdist"
  - ps: "ls dist"

artifacts:
  # These can be downloaded after the build is complete:
  - path: .MyData_debug_log.txt
  - path: dist\*.exe
